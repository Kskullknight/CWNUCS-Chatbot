INFO 07-24 17:06:26 [__init__.py:244] Automatically detected platform cuda.
INFO:__main__:서버 시작: 0.0.0.0:22222
INFO:     Started server process [249515]
INFO:     Waiting for application startup.
INFO:__main__:LLM 엔진 초기화 시작 - 모델: /home/jskim/vLLMTest/model/A.X-4.0-Light
INFO 07-24 17:06:34 [config.py:841] This model supports multiple tasks: {'embed', 'classify', 'reward', 'generate'}. Defaulting to 'generate'.
INFO 07-24 17:06:34 [config.py:1472] Using max model len 4096
INFO 07-24 17:06:34 [config.py:2285] Chunked prefill is enabled with max_num_batched_tokens=2048.
INFO 07-24 17:06:34 [core.py:526] Waiting for init message from front-end.
INFO 07-24 17:06:34 [core.py:69] Initializing a V1 LLM engine (v0.9.2) with config: model='/home/jskim/vLLMTest/model/A.X-4.0-Light', speculative_config=None, tokenizer='/home/jskim/vLLMTest/model/A.X-4.0-Light', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=/home/jskim/vLLMTest/model/A.X-4.0-Light, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"max_capture_size":512,"local_cache_dir":null}
INFO 07-24 17:06:35 [parallel_state.py:1076] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
WARNING 07-24 17:06:35 [topk_topp_sampler.py:59] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
INFO 07-24 17:06:35 [gpu_model_runner.py:1770] Starting to load model /home/jskim/vLLMTest/model/A.X-4.0-Light...
INFO 07-24 17:06:36 [gpu_model_runner.py:1775] Loading model from scratch...
INFO 07-24 17:06:36 [cuda.py:284] Using Flash Attention backend on V1 engine.
Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:01<00:02,  1.27s/it]
Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:02<00:01,  1.42s/it]
Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:04<00:00,  1.45s/it]
Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:04<00:00,  1.42s/it]

INFO 07-24 17:06:40 [default_loader.py:272] Loading weights took 4.42 seconds
INFO 07-24 17:06:41 [gpu_model_runner.py:1801] Model loading took 13.5808 GiB and 4.622581 seconds
INFO 07-24 17:06:47 [backends.py:508] Using cache directory: /home/jskim/.cache/vllm/torch_compile_cache/cdbe639e8d/rank_0_0/backbone for vLLM's torch.compile
INFO 07-24 17:06:47 [backends.py:519] Dynamo bytecode transform time: 6.61 s
INFO 07-24 17:06:53 [backends.py:155] Directly load the compiled graph(s) for shape None from the cache, took 4.951 s
INFO 07-24 17:06:53 [monitor.py:34] torch.compile takes 6.61 s in total
INFO 07-24 17:06:54 [gpu_worker.py:232] Available KV cache memory: 28.56 GiB
INFO 07-24 17:06:55 [kv_cache_utils.py:716] GPU KV cache size: 534,736 tokens
INFO 07-24 17:06:55 [kv_cache_utils.py:720] Maximum concurrency for 4,096 tokens per request: 130.55x
Capturing CUDA graph shapes:   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graph shapes:   1%|▏         | 1/67 [00:00<00:22,  2.87it/s]Capturing CUDA graph shapes:   3%|▎         | 2/67 [00:00<00:22,  2.87it/s]Capturing CUDA graph shapes:   4%|▍         | 3/67 [00:01<00:22,  2.88it/s]Capturing CUDA graph shapes:   6%|▌         | 4/67 [00:01<00:21,  2.87it/s]Capturing CUDA graph shapes:   7%|▋         | 5/67 [00:01<00:21,  2.88it/s]Capturing CUDA graph shapes:   9%|▉         | 6/67 [00:02<00:21,  2.88it/s]Capturing CUDA graph shapes:  10%|█         | 7/67 [00:02<00:20,  2.91it/s]Capturing CUDA graph shapes:  12%|█▏        | 8/67 [00:02<00:20,  2.92it/s]Capturing CUDA graph shapes:  13%|█▎        | 9/67 [00:03<00:20,  2.90it/s]Capturing CUDA graph shapes:  15%|█▍        | 10/67 [00:03<00:19,  2.89it/s]Capturing CUDA graph shapes:  16%|█▋        | 11/67 [00:03<00:19,  2.90it/s]Capturing CUDA graph shapes:  18%|█▊        | 12/67 [00:04<00:19,  2.89it/s]Capturing CUDA graph shapes:  19%|█▉        | 13/67 [00:04<00:18,  2.89it/s]Capturing CUDA graph shapes:  21%|██        | 14/67 [00:04<00:18,  2.91it/s]Capturing CUDA graph shapes:  22%|██▏       | 15/67 [00:05<00:17,  2.90it/s]Capturing CUDA graph shapes:  24%|██▍       | 16/67 [00:05<00:17,  2.89it/s]Capturing CUDA graph shapes:  25%|██▌       | 17/67 [00:05<00:16,  2.95it/s]Capturing CUDA graph shapes:  27%|██▋       | 18/67 [00:06<00:16,  2.99it/s]Capturing CUDA graph shapes:  28%|██▊       | 19/67 [00:06<00:16,  2.97it/s]Capturing CUDA graph shapes:  30%|██▉       | 20/67 [00:06<00:15,  3.00it/s]Capturing CUDA graph shapes:  31%|███▏      | 21/67 [00:07<00:15,  3.01it/s]Capturing CUDA graph shapes:  33%|███▎      | 22/67 [00:07<00:14,  3.03it/s]Capturing CUDA graph shapes:  34%|███▍      | 23/67 [00:07<00:14,  3.00it/s]Capturing CUDA graph shapes:  36%|███▌      | 24/67 [00:08<00:14,  3.03it/s]Capturing CUDA graph shapes:  37%|███▋      | 25/67 [00:08<00:13,  3.04it/s]Capturing CUDA graph shapes:  39%|███▉      | 26/67 [00:08<00:13,  3.03it/s]Capturing CUDA graph shapes:  40%|████      | 27/67 [00:09<00:13,  3.04it/s]Capturing CUDA graph shapes:  42%|████▏     | 28/67 [00:09<00:12,  3.06it/s]Capturing CUDA graph shapes:  43%|████▎     | 29/67 [00:09<00:12,  3.03it/s]Capturing CUDA graph shapes:  45%|████▍     | 30/67 [00:10<00:12,  3.04it/s]Capturing CUDA graph shapes:  46%|████▋     | 31/67 [00:10<00:11,  3.06it/s]Capturing CUDA graph shapes:  48%|████▊     | 32/67 [00:10<00:11,  3.07it/s]Capturing CUDA graph shapes:  49%|████▉     | 33/67 [00:11<00:11,  3.06it/s]Capturing CUDA graph shapes:  51%|█████     | 34/67 [00:11<00:10,  3.10it/s]Capturing CUDA graph shapes:  52%|█████▏    | 35/67 [00:11<00:10,  3.13it/s]Capturing CUDA graph shapes:  54%|█████▎    | 36/67 [00:12<00:09,  3.15it/s]Capturing CUDA graph shapes:  55%|█████▌    | 37/67 [00:12<00:09,  3.14it/s]Capturing CUDA graph shapes:  57%|█████▋    | 38/67 [00:12<00:09,  3.15it/s]Capturing CUDA graph shapes:  58%|█████▊    | 39/67 [00:12<00:08,  3.16it/s]Capturing CUDA graph shapes:  60%|█████▉    | 40/67 [00:13<00:08,  3.17it/s]Capturing CUDA graph shapes:  61%|██████    | 41/67 [00:13<00:08,  3.12it/s]Capturing CUDA graph shapes:  63%|██████▎   | 42/67 [00:13<00:07,  3.15it/s]Capturing CUDA graph shapes:  64%|██████▍   | 43/67 [00:14<00:07,  3.16it/s]Capturing CUDA graph shapes:  66%|██████▌   | 44/67 [00:14<00:07,  3.18it/s]Capturing CUDA graph shapes:  67%|██████▋   | 45/67 [00:14<00:06,  3.19it/s]Capturing CUDA graph shapes:  69%|██████▊   | 46/67 [00:15<00:06,  3.19it/s]Capturing CUDA graph shapes:  70%|███████   | 47/67 [00:15<00:06,  3.20it/s]Capturing CUDA graph shapes:  72%|███████▏  | 48/67 [00:15<00:05,  3.19it/s]Capturing CUDA graph shapes:  73%|███████▎  | 49/67 [00:16<00:05,  3.20it/s]Capturing CUDA graph shapes:  75%|███████▍  | 50/67 [00:16<00:05,  3.22it/s]Capturing CUDA graph shapes:  76%|███████▌  | 51/67 [00:16<00:04,  3.23it/s]Capturing CUDA graph shapes:  78%|███████▊  | 52/67 [00:17<00:04,  3.23it/s]Capturing CUDA graph shapes:  79%|███████▉  | 53/67 [00:17<00:04,  3.24it/s]Capturing CUDA graph shapes:  81%|████████  | 54/67 [00:17<00:04,  3.25it/s]Capturing CUDA graph shapes:  82%|████████▏ | 55/67 [00:17<00:03,  3.23it/s]Capturing CUDA graph shapes:  84%|████████▎ | 56/67 [00:18<00:03,  3.21it/s]Capturing CUDA graph shapes:  85%|████████▌ | 57/67 [00:18<00:03,  3.23it/s]Capturing CUDA graph shapes:  87%|████████▋ | 58/67 [00:18<00:02,  3.25it/s]Capturing CUDA graph shapes:  88%|████████▊ | 59/67 [00:19<00:02,  3.26it/s]Capturing CUDA graph shapes:  90%|████████▉ | 60/67 [00:19<00:02,  3.23it/s]Capturing CUDA graph shapes:  91%|█████████ | 61/67 [00:19<00:01,  3.24it/s]Capturing CUDA graph shapes:  93%|█████████▎| 62/67 [00:20<00:01,  3.24it/s]Capturing CUDA graph shapes:  94%|█████████▍| 63/67 [00:20<00:01,  3.24it/s]Capturing CUDA graph shapes:  96%|█████████▌| 64/67 [00:20<00:00,  3.25it/s]Capturing CUDA graph shapes:  97%|█████████▋| 65/67 [00:21<00:00,  3.28it/s]Capturing CUDA graph shapes:  99%|█████████▊| 66/67 [00:21<00:00,  3.25it/s]Capturing CUDA graph shapes: 100%|██████████| 67/67 [00:21<00:00,  3.20it/s]Capturing CUDA graph shapes: 100%|██████████| 67/67 [00:21<00:00,  3.09it/s]
INFO 07-24 17:07:16 [gpu_model_runner.py:2326] Graph capturing finished in 22 secs, took 0.50 GiB
INFO 07-24 17:07:16 [core.py:172] init engine (profile, create kv cache, warmup model) took 35.85 seconds
INFO 07-24 17:07:17 [loggers.py:137] Engine 000: vllm cache_config_info with initialization after num_gpu_blocks is: 33421
INFO:__main__:LLM 엔진이 성공적으로 로드되었습니다: /home/jskim/vLLMTest/model/A.X-4.0-Light
INFO:__main__:서버가 성공적으로 시작되었습니다
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:22222 (Press CTRL+C to quit)
INFO:     127.0.0.1:58400 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:58412 - "GET /health HTTP/1.1" 200 OK
